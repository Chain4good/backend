// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ImageType {
  IMAGE
  VIDEO
}

enum CampaignStatus {
  PENDING
  ACTIVE
  FINISHED
}

enum ReportStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ReportType {
  SPAM
  ILLEGAL
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  users       User[]
}

model Country {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  code      String     @unique
  phoneCode String     @unique
  campaigns Campaign[]
}

model FundraiseType {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  campaigns   Campaign[]
}

model User {
  id          Int     @id @default(autoincrement())
  email       String  @unique
  password    String
  name        String?
  phoneNumber String?
  address     String  @unique
  bio         String?
  image       String?

  roleId    Int
  role      Role       @relation(fields: [roleId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  campaigns Campaign[]
  donations Donation[]
  comments  Comment[]
  Report    Report[]
}

model Campaign {
  id Int @id @default(autoincrement())

  title           String
  description     String
  goal            Decimal        @db.Decimal(20, 2) // Store in VND
  deadline        DateTime
  totalDonated    Decimal        @default(0) @db.Decimal(18, 2)
  isClosed        Boolean        @default(false)
  isNoLimit       Boolean        @default(false)
  createdAt       DateTime       @default(now())
  status          CampaignStatus @default(PENDING)
  donations       Donation[]
  comments        Comment[]
  chainCampaignId Int?

  userId          Int
  user            User           @relation(fields: [userId], references: [id])
  categoryId      Int
  category        Category       @relation(fields: [categoryId], references: [id])
  countryId       Int
  country         Country        @relation(fields: [countryId], references: [id])
  fundraiseType   FundraiseType? @relation(fields: [fundraiseTypeId], references: [id])
  fundraiseTypeId Int?
  coverId         Int
  cover           Cover?         @relation(fields: [coverId], references: [id])
  images          Image[]
  reports         Report[]

  raisedAmount Decimal  @default(0) @db.Decimal(20, 2) // Store in VND
  ethGoal      Decimal? @db.Decimal(20, 8) // Optional ETH equivalent
}

model Cover {
  id        Int        @id @default(autoincrement())
  url       String
  createdAt DateTime   @default(now())
  type      ImageType  @default(IMAGE)
  campaigns Campaign[]
}

model Image {
  id         Int       @id @default(autoincrement())
  url        String
  createdAt  DateTime  @default(now())
  type       ImageType @default(IMAGE)
  campaign   Campaign? @relation(fields: [campaignId], references: [id])
  campaignId Int?
}

model Donation {
  id        Int      @id @default(autoincrement())
  donatedAt DateTime @default(now())
  amount    Decimal  @db.Decimal(18, 2)

  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  campaignId Int
  campaign   Campaign @relation(fields: [campaignId], references: [id])

  @@unique([userId, campaignId])
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  icon        String?
  description String?
  campaigns   Campaign[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  parentId Int?
  parent   Comment?  @relation("CommentToReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentToReplies")

  userId Int
  user   User @relation(fields: [userId], references: [id])

  campaignId Int
  campaign   Campaign @relation(fields: [campaignId], references: [id])

  @@map("comments")
}

model Report {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  status     ReportStatus @default(PENDING)
  type       ReportType
  campaignId Int
  campaign   Campaign     @relation(fields: [campaignId], references: [id])
  userId     Int?
  user       User?        @relation(fields: [userId], references: [id])
}
