// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ImageType {
  IMAGE
  VIDEO
}

enum CampaignStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  FINISHED
  CANCELLED
}

enum ReportStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ReportType {
  SPAM
  ILLEGAL
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  users       User[]
}

model Country {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  code      String     @unique
  phoneCode String     @unique
  campaigns Campaign[]
}

model FundraiseType {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  campaigns   Campaign[]
}

model User {
  id          Int     @id @default(autoincrement())
  email       String  @unique
  password    String
  name        String?
  phoneNumber String?
  address     String  @unique
  bio         String?
  image       String?
  cover       String?
  isVerified  Boolean @default(false)
  isActive    Boolean @default(true)
  kycStatus   KycStatus @default(PENDING)

  roleId    Int
  role      Role       @relation(fields: [roleId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  campaigns Campaign[]
  donations Donation[]
  comments  Comment[]
  reports   Report[]
  likes     Like[]

  refreshTokens RefreshToken[]
  Notification  Notification[]
  Post          Post[]
  UserBadge     UserBadge[]
  kycDocuments  KycDocument[]
}

model KycDocument {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  user        User      @relation(fields: [userId], references: [id])
  documentType String
  documentUrl String
  facialImageUrl String
  status      KycStatus @default(PENDING)
  rejectionReason String?
  uploadedAt  DateTime  @default(now())
  reviewedAt  DateTime?
  issueDate   DateTime?
  expiryDate  DateTime?
}

model Campaign {
  id              Int            @id @default(autoincrement())
  title           String
  description     String
  goal            Decimal        @db.Decimal(20, 2)
  deadline        DateTime
  totalDonated    Decimal        @default(0) @db.Decimal(18, 8)
  isClosed        Boolean        @default(false)
  isNoLimit       Boolean        @default(false)
  createdAt       DateTime       @default(now())
  status          CampaignStatus @default(PENDING)
  raisedAmount    Decimal        @default(0) @db.Decimal(20, 2)
  tokenGoal       String?
  tokenSymbol     String?
  tokenDecimals   Int?
  chainCampaignId Int?
  txHash          String?
  creatorAddress  String?
  tokenAddress    String?
  ethGoal         Decimal?       @db.Decimal(20, 8)
  userId          Int
  categoryId      Int
  countryId       Int
  coverId         Int
  fundraiseTypeId Int?
  audio           String?

  category      Category       @relation(fields: [categoryId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  country       Country        @relation(fields: [countryId], references: [id])
  fundraiseType FundraiseType? @relation(fields: [fundraiseTypeId], references: [id])
  cover         Cover?         @relation(fields: [coverId], references: [id])

  reports    Report[]
  images     Image[]
  donations  Donation[]
  comments   Comment[]
  progresses CampaignProgress[]
}

model Cover {
  id        Int        @id @default(autoincrement())
  url       String
  createdAt DateTime   @default(now())
  type      ImageType  @default(IMAGE)
  campaigns Campaign[]
}

model Image {
  id         Int       @id @default(autoincrement())
  url        String
  createdAt  DateTime  @default(now())
  type       ImageType @default(IMAGE)
  campaign   Campaign? @relation(fields: [campaignId], references: [id])
  campaignId Int?
}

model Donation {
  id               Int      @id @default(autoincrement())
  donatedAt        DateTime @default(now())
  amount           Decimal  @db.Decimal(18, 8)
  onChainDonatedId Int?
  txHash           String?
  address          String?
  token            String?

  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  campaignId Int
  campaign   Campaign @relation(fields: [campaignId], references: [id])
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  icon        String?
  description String?
  campaigns   Campaign[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  parentId Int?
  parent   Comment?  @relation("CommentToReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentToReplies")

  userId Int
  user   User @relation(fields: [userId], references: [id])

  campaignId Int
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  Like       Like[]

  @@map("comments")
}

model Report {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  status     ReportStatus @default(PENDING)
  type       ReportType
  campaignId Int
  campaign   Campaign     @relation(fields: [campaignId], references: [id])
  userId     Int?
  user       User?        @relation(fields: [userId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String
  content   String
  metadata  Json?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Topic {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.Text
  thumbnail String?
  slug      String   @unique
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topicId Int
  topic   Topic @relation(fields: [topicId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model OTP {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  code      String
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Badge {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  iconUrl     String?
  type        String // Add this field to store badge type
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userBadges UserBadge[]
}

model UserBadge {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  badge     Badge    @relation(fields: [badgeId], references: [id])
  badgeId   Int
  awardedAt DateTime @default(now())

  @@unique([userId, badgeId])
}

model CampaignProgress {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  images      String[]
  documents   String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId Int
}